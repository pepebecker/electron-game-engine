let loader = undefined

function load(path, callback) {
	loader = new PIXI.loaders.Loader(path, 5)

	fs.readdir(path, function (error, files) {
		files = files.filter(function (file) {
			let ext = file.split('.')[1].toLowerCase()
			return ext === 'json' || ext === 'png' || ext === 'jpg'
		})

		loader.add(files).load(callback)

		console.log('%d file' + (files.length === 1 ? ' ' : 's ') + 'loaded', files.length)
	})
}

function getSprite(source, name) {
	if (name !== undefined) {
		let data = loader.resources[source].data

		if (data) {
			let texture = loader.resources[data.source].texture.clone()
		
			for (let i = 0; i < data.tiles.length; i++) {
				let tile = data.tiles[i]
				if (tile.name === name) {
					let x = tile.frame.x
					let y = tile.frame.y
					let w = tile.frame.w
					let h = tile.frame.h
					texture.frame = new PIXI.Rectangle(x, y, w, h)
					break
				}
			}

			let sprite = new PIXI.Sprite(texture)
			return sprite
		} else {
			console.error('Can not read data from %s', source)
		}
	} else {
		let texture = loader.resources[source].texture.clone()

		if (texture) return new PIXI.Sprite(texture)
		else console.error('Can not load %s', source)
	}
}

function getSpriteNames(source) {
	let resource = loader.resources[source]
	if (resource) {
		let data = resource.data
		if (data) {
			let tiles = data.tiles
			return tiles.map(function (tile) {
				return tile.name
			})
		} else {
			console.error('Can not read data from %s', source)
		}
	} else {
		console.error('%s has not been loaded', source)
	}
}

module.exports = {
	load: load,
	getSprite: getSprite,
	getSpriteNames: getSpriteNames,
}
