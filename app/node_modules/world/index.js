function World (layers, width, height) {
	this.name = "Rosewood"
	this.width = width
	this.height = height
	this.tileSize = 32
	this.layers = layers

	this.tiles	 = []
	this.scripts = [...Array(20)].map(x => [...Array(15)])
	// this.regions = new Array(width).fill([], 0, width)
}

World.prototype.createScript = function (x, y, method, body) {
	let script = new Script(x, y, this.tileSize, method, body)
	this.scripts[x][y] = script
	script.addToStage(scriptLayer)
	this.updateScript(script, method, body)
	return script
}

World.prototype.updateScript = function (script, method, body) {
	script.method = method
	script.body = body
	script.compile()

	if (script.method === 'touch') {
		script.sprite.tint = '0xFF0000'
	}

	if (script.method === 'action') {
		script.sprite.tint = '0xFF7700'
	}
}

World.prototype.getScript = function (x, y) {
	if (x < this.scripts.length && y < this.scripts[0].length) {
		return this.scripts[x][y]
	} else {
		console.error('position is out of bounds');
	}
}

World.prototype.getAllScripts = function () {
	let scripts = []

	for (let x = 0; x < this.scripts.length; x++) {
		for (let y = 0; y < this.scripts[x].length; y++) {
			if (this.scripts[x][y]) {
				scripts.push(this.scripts[x][y])
			}
		}
	}

	return scripts
}

World.prototype.removeScript = function (x, y) {
	if (x < this.scripts.length && y < this.scripts[0].length) {
		if (this.scripts[x][y]) {
			this.scripts[x][y].removeFromStage()
			this.scripts[x][y] = undefined
		}
	} else {
		console.error('position is out of bounds');
	}
}

World.prototype.createTile = function (x, y, texture, options) {
	if (x >= 0 && x < this.width && y >= 0 && y < this.height) {

		let layer = 0

		if (options) {
			if (options.layer !== undefined) {
				layer = options.layer
			}
		}

		this.removeTile(x, y, layer)

		let tile = new Tile(x, y, this.tileSize, texture, options)
		let stage = this.layers[layer]
		tile.addToStage(stage)

		this.tiles.push(tile)

		DebugInfo.count = this.tiles.length
		DebugInfo.update()
	}
}

World.prototype.getTile = function (x, y, layer) {
	for (let i = 0; i < this.tiles.length; i++) {
		let tile = this.tiles[i]
		if (layer !== undefined && tile.options !== undefined && tile.options.layer !== undefined) {
			if (tile.getPosition().x === x && tile.getPosition().y === y && tile.options.layer === layer) {
				return tile
			}
		} else if (tile.getPosition().x === x && tile.getPosition().y === y) {
			return tile
		}
	}
}

World.prototype.removeTile = function (x, y, layer) {
	let tile = this.getTile(x, y, layer)
	if (tile) {
		tile.removeFromStage()
		let index = this.tiles.indexOf(tile)
		this.tiles.splice(index, 1)
		DebugInfo.count = this.tiles.length
		DebugInfo.update()
	}
}

World.prototype.wipe = function() {
	this.tiles = []
	for (let i = 0; i < this.layers.length; i++) {
		this.layers[i].children = []
	}

	for (let x = 0; x < this.scripts.length; x++) {
		for (let y = 0; y < this.scripts[x].length; y++) {
			if (this.scripts[x][y]) {
				this.scripts[x][y].removeFromStage()
				this.scripts[x][y] = undefined
			}
		}
	}
}

World.prototype.load = function(file, callback) {
	let path = __dirname + '/maps/' + file + '.json'
	let data = fs.readFileSync(path).toString()
	let map = JSON.parse(data)

	this.wipe()

	for (let texture in map.tiles) {
		for (let i = 0; i < map.tiles[texture].length; i++) {
			let tileObj = map.tiles[texture][i]
			this.createTile(tileObj.x, tileObj.y, texture, tileObj.options)
		}
	}

	if (map.scripts) {
		for (let i = 0; i < map.scripts.length; i++) {
			let scriptObj = map.scripts[i]
			this.createScript(scriptObj.x, scriptObj.y, scriptObj.method, scriptObj.body)
		}
	}

	if (callback) {
		callback(map.options)
	}
}

World.prototype.save = function(file, options, callback) {
	let map = {
		name: this.name,
		width: this.width,
		height: this.height
	}

	if (options) {
		map.options = options
	}

	let tilesObj = {}

	for (let i = 0; i < this.tiles.length; i++) {
		let tile = this.tiles[i]

		let tileObj = {
			x: tile.getPosition().x,
			y: tile.getPosition().y,
			options: tile.options
		}

		if (tilesObj[tile.texture] === undefined) {
			tilesObj[tile.texture] = []
		}

		tilesObj[tile.texture].push(tileObj)
	}

	map.tiles = tilesObj

	let scriptsArr = []

	const allScripts = this.getAllScripts()

	for (let i = 0; i < allScripts.length; i++) {
		let script = allScripts[i]

		let scriptObj = {
			x: script.position.x,
			y: script.position.y,
			method: script.method,
			body: script.body,
		}

		scriptsArr.push(scriptObj)
	}

	map.scripts = scriptsArr

	let data = JSON.stringify(map, null, '\t')

	let path = __dirname + '/maps/' + file + '.json'
	fs.writeFile(path, data, function () {
		if (callback) {
			callback()
		}
	})
}

module.exports = World
