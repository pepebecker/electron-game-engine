module.exports = function (layers, width, height) {
	this.name = "Rosewood"
	this.width = width
	this.height = height
	this.tileSize = 32
	this.layers = layers

	this.tiles = []
	this.events = []
	this.regions = []

	this.createTile = function (x, y, texture, options) {
		if (x >= 0 && x < this.width && y >= 0 && y < this.height) {

			let layer = 0

			if (options) {
				if (options.layer !== undefined) {
					layer = options.layer
				}
				if (options.script !== undefined) {
					let script = options.script
					options.execute = new Function(script)
				}
			}

			this.removeTile(x, y, layer)

			let tile = new Tile(x, y, this.tileSize, texture, options)
			let stage = this.layers[layer]
			tile.addToStage(stage)

			this.tiles.push(tile)

			DebugInfo.count = this.tiles.length
			DebugInfo.update()
		}
	}

	this.getTile = function (x, y, layer) {
		for (let i = 0; i < this.tiles.length; i++) {
			let tile = this.tiles[i]
			if (layer !== undefined && tile.options !== undefined && tile.options.layer !== undefined) {
				if (tile.getPosition().x === x && tile.getPosition().y === y && tile.options.layer === layer) {
					return tile
				}
			} else if (tile.getPosition().x === x && tile.getPosition().y === y) {
				return tile
			}
		}
	}

	this.removeTile = function (x, y, layer) {
		let tile = this.getTile(x, y, layer)
		if (tile) {
			tile.removeFromStage()
			let index = this.tiles.indexOf(tile)
			this.tiles.splice(index, 1)
			DebugInfo.count = this.tiles.length
			DebugInfo.update()
		}
	}

	this.wipe = function() {
		this.tiles = []
		for (let i = 0; i < this.layers.length; i++) {
			this.layers[i].children = []
		}
	}

	this.load = function(file, callback) {
		let path = __dirname + '/maps/' + file + '.json'
		let data = fs.readFileSync(path).toString()
		let map = JSON.parse(data)

		this.wipe()

		for (let texture in map.tiles) {
			for (let i = 0; i < map.tiles[texture].length; i++) {
				let tileObj = map.tiles[texture][i]
				this.createTile(tileObj.x, tileObj.y, texture, tileObj.options)
			}
		}

		if (callback) {
			callback(map.options)
		}
	}

	this.save = function(file, options, callback) {
		let map = {
			name: this.name,
			width: this.width,
			height: this.height
		}

		if (options) {
			map.options = options
		}

		let tilesObj = {}

		for (var i = 0; i < this.tiles.length; i++) {
			let tile = this.tiles[i]

			let tileObj = {
				x: tile.getPosition().x,
				y: tile.getPosition().y,
				options: tile.options
			}

			if (tilesObj[tile.texture] === undefined) {
				tilesObj[tile.texture] = []
			}

			tilesObj[tile.texture].push(tileObj)
		}

		map.tiles = tilesObj

		let data = JSON.stringify(map, null, '\t')

		let path = __dirname + '/maps/' + file + '.json'
		fs.writeFile(path, data, function () {
			if (callback) {
				callback()
			}
		})
	}
}